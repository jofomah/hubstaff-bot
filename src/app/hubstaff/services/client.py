import flask
import requests


class HubStaff:
    '''HubStagg API client for HubStaff'''

    APP_TOKEN_HEADER_KEY = 'APP-TOKEN'
    AUTH_TOKEN_HEADER_KEY = 'Auth-Token'
    HUBSTAFF_API_BASE__URL = 'https://api.hubstaff.com/v1'
    AUTH_PATH = '/auth'
    CUSTOM_BY_DATE_PATH = '/custom/by_date/my'

    def __init__(self, app_token, auth_token=None):
        '''Gets and prints the spreadsheet's header columns

        Parameters
        ----------
        app_token : str
            HubStaff application token generated when an application is created for API v1
        auth_token : str, optional
            HubStaff API v1 auth token generated by making API call to
            "/auth" with app token, API account email and password. (default is None)

        Returns
        -------
        HubStaff
            An instance of HubStaff class
        '''

        self.app_token = app_token
        self.auth_token = auth_token

    def build_auth_headers(self):
        '''builds request auth header field'''

        headers = {}

        if self.app_token is None:
            raise ValueError('HubStagg API auth token is not set')

        headers[f'{self.AUTH_TOKEN_HEADER_KEY }'] = self.auth_token
        headers[f'{self.APP_TOKEN_HEADER_KEY}'] = self.app_token

        return headers

    def set_auth_token(self, email: str, password: str) -> str:
        '''Makes API request to HubStaff API v1 "/auth" to fetch auth_token'''

        payload = {
            'email': email,
            'password': password
        }
        headers = {f'{self.APP_TOKEN_HEADER_KEY}': f'{self.app_token}'}
        api_url = f'{self.HUBSTAFF_API_BASE__URL}{self.AUTH_PATH}'

        response = requests.post(api_url, data=payload, headers=headers)
        response.raise_for_status()

        data = response.json()
        self.auth_token = data['user']['auth_token']
        return self.auth_token

    def get_report_by_date(self, start_date, end_date, **params):
        '''makes API call to fetch report request'''

        headers = self.build_auth_headers()
        params['start_date'] = start_date
        params['end_date'] = end_date

        report_url = f'{self.HUBSTAFF_API_BASE__URL}{self.CUSTOM_BY_DATE_PATH}'
        response = requests.get(report_url, params=params, headers=headers)

        response.raise_for_status()

        return response

    @staticmethod
    def create(**options):
        '''factory methods that encapsulates creation of HubStaff instance'''

        app_token = options.get('app_token', flask.current_app.config['HUBSTAFF_APP_TOKEN'])
        auth_token = options.get('auth_token', flask.current_app.config['HUBSTAFF_AUTH_TOKEN'])

        return HubStaff(app_token, auth_token)
